using Common;
using Entity.LogicModel;
using IDataBase;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DataBase
{{
    public class {0}Dal : BaseDal<{0}>, I{0}Dal
    {{
        /// <summary>
        /// 是否已存在
        /// </summary>
        public override bool IsExisted({0} t)
        {{
            string sql = "select top 1 1 from {1}  where 1=1 ";
            return MysqlDapper.ExecuteSql_First<int>(sql, t) > 0;
        }}

        /// <summary>
        /// 是否已存在
        /// </summary>
        public override bool IsExisted(int id)
        {{
            string sql = "select top 1 1 from {1}  where {2}=@Id ";
            return MysqlDapper.ExecuteSql_First<int>(sql, new {{ Id = id }}) > 0;
        }}

        /// <summary>
        /// 获取所有Model对象
        /// </summary>
        public override IList<{0}> GetAll()
        {{
            string sql = "select * from {1}  ";
            return MysqlDapper.ExecuteSql_ToList<{0},{0}>(sql, null);
        }}

        private string GetWhere({0} t)
        {{
            StringBuilder sb = new StringBuilder();
            return sb.ToString();
        }}

        /// <summary>
        /// 根据条件返回所有信息
        /// </summary>
        public override IList<{0}> GetList({0} t)
        {{
            string sql = "select * from {1}  where 1=1 ";
            string where = GetWhere(t);
            return MysqlDapper.ExecuteSql_ToList<{0},{0}>(sql + where, t);
        }}


        /// <summary>
        /// 根据条件返回指定页的数据
        /// </summary>
        public override IList<{0}> GetList({0} t, out int recordCount)
        {{
            string sql = "select * from {1}  where 1=1 ";
            string where = GetWhere(t);
            string sqlCount = "select count(1) from {1}  where 1=1 ";
            recordCount = MysqlDapper.ExecuteSP_First<int>(sqlCount + where, t);
            return MysqlDapper.ExecuteSql_ToList<{0},{0}>(sql + where, t);
        }}

        /// <summary>
        /// 根据ID查询单条数据
        /// </summary>
        public override {0} GetById(long id)
        {{
            string sql = "select top 1 * from {1}  where {2}=@Id ";
            return MysqlDapper.ExecuteSql_First<{0},{0}>(sql, new {{ Id = id }});
        }}
        /// <summary>
        ///获取插入语句
        /// </summary>
        /// <returns></returns>
        private string GetInsertStr()
        {{
            string sql = "{3}";
            return sql;
        }}

        /// <summary>
        /// 新增对象
        /// </summary>
        public override int Insert({0} t)
        {{
            string sql = GetInsertStr();
            return MysqlDapper.InsertAndReturnId(sql, t);
        }}

        /// <summary>
        /// 批量新增对象
        /// </summary>
        public override int BatchInsert(IList<{0}> ts)
        {{
            string sql = GetInsertStr();
            return MysqlDapper.ExecuteSql(sql, ts);
        }}

        /// <summary>
        ///获取更新语句
        /// </summary>
        /// <returns></returns>
        private string GetUpdate()
        {{
            string sql = "{4}";
            return sql;
        }}
        /// <summary>
        /// 更新对象
        /// </summary>
        public override int Update({0} t)
        {{
            string sql = GetUpdate();
            return MysqlDapper.ExecuteSql(sql, t);
        }}

        /// <summary>
        /// 批量更新对象
        /// </summary>
        public override int BatchUpdate(IList<{0}> ts)
        {{
            string sql = GetUpdate();
            return MysqlDapper.ExecuteSql(sql, ts);
        }}

        /// <summary>
        /// 根据Id删除对象
        /// </summary>
        public override int Delete(long id)
        {{
            string sql = "delete from {1} where {2} = @Id";
            return MysqlDapper.ExecuteSql(sql, new {{ Id = id }});
        }}

        /// <summary>
        /// 批量删除对象
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public override int Delete(IList<long> ids)
        {{
            string sql = string.Format("delete from {1} where {2} in ({{0}})", string.Join(",", ids));
            return MysqlDapper.ExecuteSql(sql, null);
        }}
    }}
}}
